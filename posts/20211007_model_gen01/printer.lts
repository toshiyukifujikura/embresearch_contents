Printer = (req-> beg -> end -> Printer).

||PSys = ({a,b}:Printer).


PSys2 = Q0,
	Q0	= (b.req -> Q1		// 要求待ち
		  |a.req -> Q8),
	Q1	= (b.beg -> Q2		// bからの要求受付
		  |a.req -> Q7),
	Q2	= (b.end -> Q0		// bのprint中
		  |a.req -> Q3),
	Q3	= (a.beg -> Q4		// これダメ, bのprint中だから
		  |b.end -> Q8),
	Q4	= (a.end -> Q2  	// 多重プリント，この状態は存在しない．
		  |b.end -> Q5),
	Q5	= (a.end -> Q0
		  |b.req -> Q6),
	Q6	= (a.end -> Q1
		  |b.beg -> Q4),	// これダメ, aのプリント中だから
	Q7	= (b.beg -> Q3		// aのprint中, bからの要求受付
		  |a.beg -> Q6),
	Q8	= (a.beg -> Q5		// aからの要求受付
		  |b.req -> Q7).

PSys3 = Q0,
	Q0	= (b.req -> Q1		// 要求待ち
		  |a.req -> Q8),
	Q1	= (b.beg -> Q2		// bからの要求受付
		  |a.req -> Q7),
	Q2	= (b.end -> Q0		// bのprint中
		  |a.req -> Q3),
	Q3	= (//a.beg -> Q4	// これダメ, bのprint中だから
		  b.end -> Q8),
	Q4	= (a.end -> Q2  	// 多重プリント，この状態は存在しない．
		  |b.end -> Q5),
	Q5	= (a.end -> Q0
		  |b.req -> Q6),
	Q6	= (a.end -> Q1),
		  //|b.beg -> Q4),// これダメ, aのプリント中だから
	Q7	= (b.beg -> Q3		// aのprint中, bからの要求受付
		  |a.beg -> Q6),
	Q8	= (a.beg -> Q5		// aからの要求受付
		  |b.req -> Q7).

||PSysM =(PSys3). // 同時プリントを回避した動作モデル

fluent Pa = <a.beg, a.end> initially 0
fluent Pb = <b.beg, b.end> initially 0

assert C0 = []!(Pa && Pb)
constraint C0 = C0

||PsysM2 = (PSys||C0).


